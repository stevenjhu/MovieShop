MVC

Model => Data representation for the view

View => HTML + CSS + JS + Razor

Controller => 

HTTP Requests

GET: get movie detail
PUT: change password
POST: user registration
DELETE: delete user

Request goes to Controller

GET http://movieshop.com/movies/details/2

domain/controller/action_method

return View()
Goes to the View folder and the controller folder within
action method name needs to be the same as the cshtml file in controller folder in views

ApplicationCore:
1. Entities: 
2. Exceptions: custom exceptions
3. Models: how the data is passed to View

Services: business logic as interfaces
Repositories: data access logic

Defined in application core, and implemented in infrastructure

Project reference:
Intrastructure->Application Core
MVC->Infrastructure and Application Core

----------------------------------------------------

EF Core - 6
Dapper -> micro-ORM
ORM => Object Relation Mapper - Northwind, Adventure

Developer's Job to make sure the query is optimized behind the scene of EF Core

EF Core Code First approach
https://docs.microsoft.com/en-us/ef/core/cli/dotnet
1. Install EF Core tools
dotnet tool install --global dotnet-ef
OR
dotnet tool update --global dotnet-ef

2. Install Microsoft.EntityFrameworkCore.SqlServer in Infrastructure and MVC projects
3. Install Microsoft.EntityFrameworkCore.Design in MVC
4. Create a class in inherits from DbContext => represent the database
5. Create a connnection string which EF Core is going to use to access the database
	should include server name, database name, and any credentials
6. Read the connection string from appsetting.json and inject into MovieShopDbContext
7. DbSet represents your database table, create an entity class that represents your table 
8. Migrations -- Create initial migration:  
    dotnet ef migrations add InitialMigration  -p ../Infrastructure/Infrastructure.csproj
9. Apply the Migration -  
    dotnet ef database update
10. TO make any schema changes, we can use 2 approaches
    1. Data Annotations => using System.ComponentModel.DataAnnotations;
    2. Fluent API => much more powerful and has more options

11.

   Register => email/password

   1. public access => home page, movie details page, cast details, login, register
   2. customer access (loged in) => view/edit profile, purchase movie, review/rating, favorite
   3. Admin Access (user loged in and have role of admin) => create movie, create cast, get most purchased movie

   Register
    email               password           Salt
 U1 abc@abc.com         (Pas##4HKLtt   + adfafafdafdaf)         Hashing - Pdbk/Bcrypt  => fhddghdgdtrhyrety456456y45
 U2 xyz@abc.com         (Pas##4HKLtt   + hfhhgdhgdfhggds)       Hashing - Pdbk/Bcrypt  => dfhgbdfgdfgfdsg789sfdugdsfghi

 Login
 select * from Users where email = abc@abc.com
 U1 abc@abc.com         (Pas##4HKLtt +  adfafafdafdaf) Hashing - Pdbk/Bcrypt  => fhddghdgdtrhyrety456456y45 == fhddghdgdtrhyrety456456y45

Salt: unique generated hash value that is added to the password to make the hashed password unique. 
(Even if two passwords are the same, because the salt of two users are never the same, the passwords will always be different)
To check password, redo conversion of input password to hashed password with salt, and then compared with stored hashed password to authenticate user


Model Binding (case insensitive): map data from input form to Model property

TO-DO:
1. Azure, create account, activate free account with PERSONAL email, 200$ one
2. Sign into Azure portal
3. Read materials in LMS

QUESTION:
1. Compositional order of the url is strictly syntatical or conventional? 
(e.g. id first, then controller)
Ans: as long as the pattern is human-friendly, meaning it is logical enough to understand what the url means, any amount of patterns can be created (in controllers)
2. What does .HasDefaultValue(9.9m)  means?
3. How do we map column from string to uniqueidentifier?

